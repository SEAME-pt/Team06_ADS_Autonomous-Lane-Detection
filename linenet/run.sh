#!/bin/bash

# LineNet Training Script
# Usage examples for different scenarios

echo "=== LineNet Training Examples ==="

# Example 1: Basic training with nano variant (fastest)
echo "1. Training nano variant (ultra-lightweight):"
echo "python train_linenet.py \\"
echo "  --train_images ./data/train/images \\"
echo "  --train_masks ./data/train/masks \\"
echo "  --variant nano \\"
echo "  --batch_size 32 \\"
echo "  --epochs 50 \\"
echo "  --learning_rate 1e-3 \\"
echo "  --experiment_name linenet_nano_exp1"
echo ""

# Example 2: Training with separate validation data
echo "2. Training with separate validation data:"
echo "python train_linenet.py \\"
echo "  --train_images ./data/train/images \\"
echo "  --train_masks ./data/train/masks \\"
echo "  --val_images ./data/val/images \\"
echo "  --val_masks ./data/val/masks \\"
echo "  --variant small \\"
echo "  --batch_size 16 \\"
echo "  --epochs 100 \\"
echo "  --learning_rate 1e-3 \\"
echo "  --experiment_name linenet_small_separate_val"
echo ""

# Example 3: Training medium variant with custom loss weights
echo "3. Training medium variant with custom loss weights:"
echo "python train_linenet.py \\"
echo "  --train_images ./data/train/images \\"
echo "  --train_masks ./data/train/masks \\"
echo "  --variant medium \\"
echo "  --batch_size 8 \\"
echo "  --epochs 150 \\"
echo "  --learning_rate 5e-4 \\"
echo "  --bce_weight 0.4 \\"
echo "  --dice_weight 0.4 \\"
echo "  --focal_weight 0.2 \\"
echo "  --image_size 320 320 \\"
echo "  --experiment_name linenet_medium_custom_loss"
echo ""

# Example 4: Training strong variant with wandb logging
echo "4. Training strong variant with Weights & Biases logging:"
echo "python train_linenet.py \\"
echo "  --train_images ./data/train/images \\"
echo "  --train_masks ./data/train/masks \\"
echo "  --variant strong \\"
echo "  --batch_size 4 \\"
echo "  --epochs 200 \\"
echo "  --learning_rate 3e-4 \\"
echo "  --weight_decay 1e-5 \\"
echo "  --image_size 384 384 \\"
echo "  --use_wandb \\"
echo "  --wandb_project line_detection_lab \\"
echo "  --experiment_name linenet_strong_lab_conditions"
echo ""

# Example 5: Resume training from checkpoint
echo "5. Resume training from checkpoint:"
echo "python train_linenet.py \\"
echo "  --train_images ./data/train/images \\"
echo "  --train_masks ./data/train/masks \\"
echo "  --variant small \\"
echo "  --batch_size 16 \\"
echo "  --epochs 100 \\"
echo "  --resume ./outputs/linenet_experiment/checkpoint_epoch_50.pth \\"
echo "  --experiment_name linenet_resumed"
echo ""

# Example 6: Quick test run (few epochs for debugging)
echo "6. Quick test run for debugging:"
echo "python train_linenet.py \\"
echo "  --train_images ./data/train/images \\"
echo "  --train_masks ./data/train/masks \\"
echo "  --variant lite \\"
echo "  --batch_size 8 \\"
echo "  --epochs 5 \\"
echo "  --learning_rate 1e-3 \\"
echo "  --visualize_every 1 \\"
echo "  --save_every 2 \\"
echo "  --experiment_name debug_run"
echo ""

echo "=== Model Variants Comparison ==="
echo "nano:   Ultra-lightweight, ~0.5M params, best for edge devices"
echo "lite:   Lightweight, ~1.2M params, good balance for mobile"
echo "small:  Standard, ~3.5M params, recommended for most cases"
echo "medium: High accuracy, ~8M params, better for complex scenes"
echo "strong: Maximum accuracy, ~15M params, best results"
echo ""

echo "=== Recommended Settings for Lab Conditions ==="
echo "For your lab setup with 800 images and challenging conditions:"
echo ""
echo "1. Start with 'small' variant for good balance"
echo "2. Use higher learning rate initially (1e-3) then reduce"
echo "3. Strong data augmentation to handle lighting variations"
echo "4. Combined loss function helps with line detection"
echo "5. Monitor validation IoU and Dice scores"
echo ""

echo "=== Directory Structure Expected ==="
echo "data/"
echo "├── train/"
echo "│   ├── images/     # Training images (.jpg, .png, etc.)"
echo "│   └── masks/      # Training masks (.png)"
echo "└── val/            # Optional validation data"
echo "    ├── images/"
echo "    └── masks/"
echo ""

echo "=== Output Structure ==="
echo "outputs/"
echo "└── experiment_name/"
echo "    ├── config.json              # Training configuration"
echo "    ├── training.log            # Training logs"
echo "    ├── best_model.pth          # Best model (highest IoU)"
echo "    ├── final_model.pth         # Final epoch model"
echo "    ├── checkpoint_epoch_X.pth  # Periodic checkpoints"
echo "    ├── training_curves.png     # Training metrics plots"
echo "    └── predictions_epoch_X.png # Prediction visualizations"
echo ""

echo "=== Installation Requirements ==="
echo "pip install torch torchvision"
echo "pip install opencv-python pillow"
echo "pip install albumentations"
echo "pip install matplotlib tqdm"
echo "pip install wandb  # optional for experiment tracking"
echo ""

echo "=== Quick Start Command ==="
echo "For your 800 image dataset, try this first:"
echo ""
echo "python train_linenet.py \\"
echo "  --train_images ./data/images \\"
echo "  --train_masks ./data/masks \\"
echo "  --variant small \\"
echo "  --batch_size 16 \\"
echo "  --epochs 100 \\"
echo "  --learning_rate 1e-3 \\"
echo "  --image_size 224 224 \\"
echo "  --visualize_every 2 \\"
echo "  --experiment_name lab_line_detection"